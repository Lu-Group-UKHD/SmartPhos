% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/differential_expression.R
\name{performDifferentialExp}
\alias{performDifferentialExp}
\title{Perform Differential Expression Analysis}
\usage{
performDifferentialExp(
  se,
  assay,
  method,
  condition = NULL,
  reference,
  target,
  refTime = NULL,
  targetTime = NULL
)
}
\arguments{
\item{se}{A SummarizedExperiment object containing the data.}

\item{assay}{A character string specifying the assay to use for the analysis.}

\item{method}{A character string specifying the method to use for differential expression analysis ('limma' or 'ProDA').}

\item{condition}{A character string specifying the condition column in colData(se). Default is `NULL`.}

\item{reference}{A character string or vector specifying the reference group.}

\item{target}{A character string or vector specifying the target group.}

\item{refTime}{A character string or vector specifying the reference time points. Default is `NULL`.}

\item{targetTime}{A character string or vector specifying the target time points. Default is `NULL`.}
}
\value{
A list containing:
\item{resDE}{A tibble with the differential expression results.}
\item{seSub}{A SummarizedExperiment object subset to the samples used in the analysis.}
}
\description{
`performDifferentialExp` performs differential expression analysis on a given SummarizedExperiment object using either the 'limma' or 'ProDA' method.
}
\details{
This function is designed to facilitate differential expression analysis on a SummarizedExperiment (SE) object. The function allows users to specify various parameters to tailor the analysis to their specific experimental setup.

The main steps of the function are as follows:

1. **Sample Selection:** Based on the provided `condition`, `reference`, and `target` arguments, the function identifies the relevant samples for the analysis. If time points (`refTime` and `targetTime`) are provided, it further refines the sample selection.

2. **Subsetting the SE Object:** The SE object is subsetted to include only the selected samples. A new column `comparison` is added to the colData, indicating whether each sample belongs to the reference or target group.

3. **Design Matrix Construction:** The function constructs a design matrix for the differential expression analysis. If the SE object contains a `subjectID` column, this is included in the design to account for repeated measures or paired samples.

4. **Differential Expression Analysis:** Depending on the specified `method`, the function performs the differential expression analysis using either the 'limma' or 'ProDA' package:
    - **Limma:** The function fits a linear model to the expression data and applies empirical Bayes moderation to the standard errors. The results are then extracted and formatted.
    - **ProDA:** The function fits a probabilistic dropout model to the expression data and tests for differential expression. The results are then extracted and formatted.

5. **Result Formatting:** The differential expression results are merged with the metadata from the SE object, and the resulting table is formatted into a tibble. The table includes columns for log2 fold change (`log2FC`), test statistic (`stat`), p-value (`pvalue`), adjusted p-value (`padj`), and gene/feature ID (`ID`).

The function returns a list containing the formatted differential expression results and the subsetted SE object. This allows users to further explore or visualize the results as needed.
}
\examples{
# Assuming 'se' is a SummarizedExperiment object with appropriate data:
result <- performDifferentialExp(se, assay = "counts", method = "limma", condition = "group", reference = "control", target = "treatment")
result$resDE

}
