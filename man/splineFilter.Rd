% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time_series_clustering.R
\name{splineFilter}
\alias{splineFilter}
\title{Filter Expression Matrix Using Spline Models}
\usage{
splineFilter(
  exprMat,
  subjectID = NULL,
  time,
  df,
  pCut = 0.5,
  ifFDR = FALSE,
  treatment = NULL,
  refTreatment = NULL
)
}
\arguments{
\item{exprMat}{A numeric matrix of expression data, where rows are features and columns are samples.}

\item{subjectID}{An optional vector of subject IDs corresponding to columns in `exprMat`. Default is `NULL`.}

\item{time}{A numeric vector representing the time points corresponding to columns in `exprMat`.}

\item{df}{An integer specifying the degrees of freedom for the spline basis.}

\item{pCut}{A numeric value for the p-value cutoff to filter significant features. Default is `0.05`.}

\item{ifFDR}{A logical value indicating if the false discovery rate (FDR) should be used for filtering. If FALSE, raw p-values are used. Default is `FALSE`.}

\item{treatment}{An optional vector of treatment labels corresponding to columns in `exprMat`. Default is `NULL`.}

\item{refTreatment}{An optional reference treatment label for the `treatment` vector. Default is `NULL`.}
}
\value{
A filtered expression matrix containing only the features that meet the significance criteria.
}
\description{
`splineFilter` filters an expression matrix based on spline models fitted to time-series data, optionally considering treatment and subject ID.
}
\details{
The function performs the following steps:
\enumerate{
  \item Converts time points from minutes to hours if both units are present.
  \item Removes rows with missing values from the expression matrix.
  \item Constructs a design matrix for the spline model, optionally including subject IDs and treatments.
  \item Fits a linear model using the design matrix and performs empirical Bayes moderation.
  \item Extracts significant features based on the specified p-value or FDR cutoff.
}
}
\examples{
# Load multiAssayExperiment object
data("dda_example")
# Get SummarizedExperiment object
se <- dda_example[["Proteome"]]
colData(se) <- colData(dda_example)
# Preprocess the proteome assay
result <- preprocessProteome(se, normalize = TRUE)
# Subset the result
resultSub <- result[, result$treatment == "EGF"]
# Perform clustering
clusterResult <- clusterTS(assay(resultSub), 5)

}
