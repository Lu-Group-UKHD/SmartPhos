fullTab$sample <- sampleName
fullTab$type <- "proteome"
phosphoTab <- data.frame(fileName = rep(file.path(folderPath,"Phospho (STY)Sites.txt"),length(sampleName)))
phosphoTab$sample <- sampleName
phosphoTab$type <- "phosphoproteome"
inputTab <- rbind(fullTab, phosphoTab)
inputTab$batch <- eachFolder
#create a unique experimental id, in case there are duplicates for sample names, will be used as column ids
inputTab$id <- paste0(inputTab$batch,"_",inputTab$sample)
inputTab
})
inputTab <- do.call(rbind, inputTab)
}
library(devtools)
load_all()
library(devtools)
load_all()
library(tidyverse)
mouse <- read_tsv("https://raw.githubusercontent.com/statOmics/PSLSData/main/mouseP16045.txt")
mouse
mouse %>%
ggplot(aes(x = mouse, y = intensity, col = celltype)) +
geom_point()
mouse %>%
ggplot(aes(x = celltype, y = intensity)) +
geom_point() +
geom_line(aes(group = mouse)) +
geom_point(aes(col = celltype))
mouseWide <- mouse %>%
spread(celltype, intensity) %>%
mutate(delta = Treg - Tcon)
mouseWide
mouseWide %>%
ggplot(aes(x = "", y = delta)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter()
deltaSum <- mouseWide %>%
summarize(
mean = mean(delta, na.rm = TRUE),
sd = sd(delta, na.rm = TRUE),
n = n()
) %>%
mutate(se = sd / sqrt(n))
deltaSum
cor(mouseWide[, c("Tcon", "Treg")])
var(mouseWide[, c("Tcon", "Treg")])
var(mouseWide[, c("Tcon", "Treg")]) %>%
diag() %>%
sqrt()
sdDelta2 <- (c(-1, 1) %*% var(mouseWide[, c("Tcon", "Treg")]) %*% c(-1, 1)) %>%
sqrt()
sdDelta2
seDeltaBar <- sdDelta2 / sqrt(deltaSum$n)
seDeltaBar
deltaSum
t.test(delta~1, mouseWide)
lmRCB <- lm(intensity ~ celltype + mouse, mouse)
plot(lmRCB, which = c(1, 2, 3))
lmRCB <- lm(intensity ~ celltype + mouse, mouse)
plot(lmRCB, which = c(1, 2, 3))
anovaRCB <- car::Anova(lmRCB, type = "III")
summary(lmRCB)
t.test(delta ~1 , mouseWide)
shiny::runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
sym("PC1")
mae <- readRDS("/Users/shubhamagrawal/Documents/work/SmartPhos/app/maeDIA.Rds")
se <- mae[["Phosphoproteome"]]
colData(se) <- colData(mae)
source("/Users/shubhamagrawal/Documents/work/SmartPhos/app/utils.R")
ppe <- preprocessPhos(se)
pca <- prcomp(ppe)
pca <- prcomp(t(assays(ppe[["imputed"]])))
ppe[["imputed"]]
ppe
ppe[["Intensity"]]
assays(ppe)[[imputed]]
assays(ppe)[["imputed"]]
pca <- prcomp(t(assays(ppe)[["imputed"]]))
pca
pcadf <- as.data.frame(pca$x)
pcadf
ggplot(pcadf) + geom_point(x=PC1,y=PC2)
ggplot(pcadf) + geom_point(aes(x=PC1,y=PC2))
colnames(pcadf)
colnames(pcadf)[1]
colnames(pcadf)[4]
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=PC2))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=colnames(pcadf)[4]))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=sym(colnames(pcadf)[4])))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=colnames(pcadf)[4]))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=colnames(pcadf)[4]))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=eval(parse(text = colnames(pcadf)[4]))
)
)
ggplot(pcadf) + geom_point(aes(x="PC1",y=PC2))
ggplot(pcadf) + geom_point(aes(x="PC1",y="PC2"))
ggplot(pcadf) + geom_point(aes(x=eval(parse("PC1")),y=eval(parse("PC2"))))
ggplot(pcadf) + geom_point(aes(x=eval(parse(colnames(pcadf)[1])),y=eval(parse(colnames(pcadf)[2]))))
ggplot(pcadf) + geom_point(aes(x=eval(parse(colnames(text = pcadf)[1])),y=eval(parse(text = colnames(pcadf)[2]))))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=eval(parse(text = colnames(pcadf)[4]))
))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=eval(parse(text = colnames(pcadf)[4]))))
ggplot(pcadf) + geom_point(aes(x=eval(parse(colnames(pcadf)[1])),y=eval(parse(text = colnames(pcadf)[4]))))
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=eval(parse(text = colnames(pcadf)[4]))))
eval(parse(text = colnames(pcadf)[4]))
parse(text = colnames(pcadf)[4])
ggplot(pcadf) + geom_point(aes(x=colnames(pcadf)[1],y=colnames(pcadf)[4]))
ggplot(pcadf) + geom_point(aes(x="PC1",y="PC2"))
ggplot(pcadf) + geom_point(aes(x=sym("PC1"),y=sym("PC2")))
ggplot(pcadf) + geom_point(aes(x="PC1",y="PC2"))
ggplot(pcadf) + geom_point(aes(x=PC1,y=PC2))
as.name("PC1")
ggplot(pcadf) + geom_point(aes(x=as.name("PC1"),y=PC2))
ggplot(pcadf) + geom_point(aes(x=PC1,y=PC2))
ggplot(pcadf) + geom_point(aes_string(x="PC1",y="PC2"))
ggplot(pcadf) + geom_point(aes_string(x="PC1",y="PC3"))
ggplot(pcadf) + geom_point(aes(x = !!sym(colnames(pcadf)[1]), y = !!sym(colnames(pcadf)[2])))
ggplot(pcadf) + geom_point(aes(x = !!(colnames(pcadf)[1]), y = !!sym(colnames(pcadf)[2])))
ggplot(pcadf) + geom_point(aes(x = !!sym(colnames(pcadf)[1]), y = !!sym(colnames(pcadf)[2])))
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
colData(se)
colnames(colData(se))
colnames("none", colData(se))
paste("none",colnames(colData(se)), ",")
colnames(colData(se)) + "none"
c("none",colnames(colData(se)))
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
pcadf$PC1
pcadf
summary(pcadf)
rownames(pcadf$PC1)
rownames()
rownames(pcadf)
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
runApp('Documents/work/SmartPhos/app')
colData(se)
runApp('Documents/work/SmartPhos/app')
shiny::runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
shiny::runApp('Documents/work/apps/processSMART')
runApp('Documents/work/apps/RNAseq')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
shiny::runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
shiny::runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
runApp('Documents/work/SmartPhos_app/app')
shiny::runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
library(MultiAssayExperiment)
library(SummarizedExperiment)
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
shiny::runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
library(MultiAssayExperiment)
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
source("https://csama2023.bioconductor.eu/install_packages.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scater")
library(scater)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("densvis")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("densvis")
library(densvis)
install.packages("densvis")
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
BiocManager::install(“NewWave”, type = “binary”)
source("https://csama2023.bioconductor.eu/install_packages.R")
BiocManager::install("densvis")
shiny::runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work')
shiny::runApp('Documents/work')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
shiny::runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
shiny::runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
?bsCollapsePanel
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
shiny::runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
runApp('Documents/work/SmartPhos_app/phosphoproteomicsExplorer')
version
version
setwd("~/Documents/work/SmartPhos/R")
library(devtools)
load_all()
load_all()
#'   \item Replaces the phosphoproteome assay in the \code{MultiAssayExperiment} object or adds the normalized data as a new assay, depending on the \code{replace} parameter.
#' }
#'
#' @examples
#' # Example usage:
#' mae <- readExperimentDIA(fileTable)
#' mae <- normByFullProteome(mae, replace = TRUE)
#'
#' @import MultiAssayExperiment
#' @export
normByFullProteome <- function(mae, replace = TRUE) {
# Check if both Phosphoproteome and Proteome assays are present
if (!all(c("Phosphoproteome","Proteome") %in% names(assays(mae)))) {
stop("Both Phosphoproteome and Proteome assays should be present in the MultiAssayExperiment object")
}
# Extract phosphoproteome and proteome assays
ppe <- mae[["Phosphoproteome"]]
fpe <- mae[["Proteome"]]
sampleTab <- colData(mae)
sampleTab.pp <- sampleTab
sampleTab.fp <- sampleTab[sampleTab$sampleType == "FullProteome",]
# Check if proteome assay for the unenriched samples is present
if (nrow(sampleTab.fp) ==0 ) {
stop("Proteome assay for the unenriched samples i.e., sampleType with FullProteome should be present")
}
# Extract assay data for phosphoproteome and proteome
ppMat <- assay(ppe[,colnames(ppe) %in% rownames(sampleTab.pp)])
fpMat <- assay(fpe[,colnames(fpe) %in% rownames(sampleTab.fp)])
# Find the full proteome (non-enriched) counterparts of the phosphoproteome (enriched) samples
ppSampleName <- sampleTab.pp[colnames(ppMat),]$sampleName
fpSampleID <- rownames(sampleTab.fp)[match(ppSampleName, sampleTab.fp$sampleName)]
# Handle the situation where not every phosphoproteome sample has a full proteome counterpart
ppMat <- ppMat[,!is.na(fpSampleID)]
fpSampleID <- fpSampleID[!is.na(fpSampleID)]
# Get the full proteomic measurement of the corresponding proteins and samples
fpMat <- fpMat[match(rowData(ppe)$UniprotID, rowData(fpe)$UniprotID),fpSampleID]
# Ensure the samples match
stopifnot(all((colnames(fpMat)) == removePreSuffix(colnames(ppMat))))
# Normalize phosphoproteome data by the full proteome data
ppMat.norm <- ppMat/fpMat
ppMat.norm <- ppMat.norm[rowSums(!is.na(ppMat.norm))>0,]
ppe.norm <- ppe[rownames(ppMat.norm),colnames(ppMat.norm)]
assay(ppe.norm) <- ppMat.norm
# Replace or add the normalized phosphoproteome data to the MultiAssayExperiment object
if (replace) {
mae[["Phosphoproteome"]] <- ppe.norm
} else {
mae <- MultiAssayExperiment(list(Phosphoproteome = mae[["Phosphoproteome"]],
Proteome = mae[["Proteome"]],
PhosphoRatio = ppe.norm),
colData = colData(mae))
}
return(mae)
}
runSmartPhos()
load_all()
runApp('~/Documents/work/SmartPhos/inst/shiny-app')
devtools::check()
?runSmartPhos
runSmartPhos()
?plotlyOutput
load_all()
runSmartPhos()
load_all()
runSmartPhos()
runSmartPhos()
?pull
load_all()
runSmartPhos()
library(data.table)
runSmartPhos()
?datatable
runSmartPhos()
?rowMedians
load_all()
runSmartPhos()
?loadGSC
load_all()
runSmartPhos()
runSmartPhos()
runSmartPhos()
runApp('~/Documents/work/SmartPhos/inst/shiny-app')
setwd("~/Documents/work/SmartPhos/R")
load_all()
devtools::check()
file1 <- system.file("extdata", "phosDDA_1.xls", package = "SmartPhos")
file2 <- system.file("extdata", "proteomeDDA_1.xls", package = "SmartPhos")
fileTable <- data.frame(
type = c("phosphoproteome", "proteome"),
fileName = c(file1, file2),
sample = c("Sample1", "sample1"),
id = c("s1", "s2")
)
fileTable
load_all()
devtools::check()
View(fileTable)
fileTable
mae <- readExperiment(fileTable, localProbCut = 0.75, scoreDiffCut = 5, fdrCut = 0.1, scoreCut = 10, pepNumCut = 1, ifLFQ = TRUE, annotation_col = c("id"))
mae
load_all()
devtools::check()
load_all()
devtools::check()
colData()
?coldata
?colData
library(SummarizedExperiment)
?colData
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
devtools::check()
?prcomp
load_all()
devtools::check()
load_all()
devtools::check()
load_all()
devtools::check()
mae <- readRDS("/Users/shubhamagrawal/Documents/work/compressed/data_readExperimentDIA_processed_TGFb_DIA.rds")
mae
colData(mae)
colData(mae)$sample
mae <- readRDS("/Users/shubhamagrawal/Documents/work/SmartPhos_app/phosphoproteomicsExplorer/maeDIA.Rds")
mae
colData(mae)
cd <- colData(mae)
cd$sample
library(stringr)
new <- str_remove(cd$sample, "FullProteome_")
new
new <- str_remove(cd$sample, c("FullProteome_","Phospho_"))
new <- str_remove(new, "Phospho_")
new
cd$sampleName <- new
cd
colData(mae) <- cd
mae
colData(mae)
?saveRDS
saceRDS(mae, "/Users/shubhamagrawal/Documents/work/SmartPhos_app/phosphoproteomicsExplorer/maeDIA.Rds")
saveRDS(mae, "/Users/shubhamagrawal/Documents/work/SmartPhos_app/phosphoproteomicsExplorer/maeDIA.Rds")
mae <- readRDS("/Users/shubhamagrawal/Documents/work/SmartPhos_app/phosphoproteomicsExplorer/maeDIA.Rds")
colData(mae)
runSmartPhos()
runSmartPhos()
colData(mae)
colData(mae)$sampleName
unique(colData(mae)$sampleName)
runPhosphoAdjustment(maeData = mae)
colData(mae)$sampleType
load_all()
devtools::check()
runSmartPhos()
load_all()
runSmartPhos()
mae <- readRDS("/Users/shubhamagrawal/Documents/work/compressed/data_readExperimentDIA_processed_TGFb_DIA.rds")
colData(mae)
colData(mae)$sampleName
load_all()
runSmartPhos()
load_all()
runSmartPhos()
load_all()
runSmartPhos()
load_all()
devtools::check()
devtools::check()
load_all()
devtools::check()
?fviz_nbclust
?factoextra::fviz_nbclust
usethis::use_package("factoextra")
usethis::use_package("cowplot")
runSmartPhos()
runApp('~/Documents/work/SmartPhos_app/SmartPhosExplorer')
load_all()
?addZeroTime
load_all()
devtools::check()
devtools::check()
mae
names(mae)
mae <- readRDS("/Users/shubhamagrawal/Documents/work/SmartPhos_app/phosphoproteomicsExplorer/maeDIA.Rds")
mae
cd <- colData(mae)
cd
"FullProteome" %in% unique(cd$sampleType)
load_all()
runSmartPhos()
load_all()
runSmartPhos()
runApp('~/Documents/work/SmartPhos/inst/shiny-app')
runApp('~/Documents/work/SmartPhos_app/SmartPhosExplorer')
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
data <- matrix(rnorm(20), nrow = 5, ncol = 4)
colData <- DataFrame(treatment = c("TreatmentA", "TreatmentA", "Control", "Control"),
timepoint = c("10min", "20min", "0min", "10min"))
rowData <- DataFrame(genes = paste0("gene", 1:5))
se <- SummarizedExperiment(assays = list(intensity = data), colData = colData, rowData = rowData)
se
assay(se)
result <- addZeroTime(data, condition = "treatment", treat = "TreatmentA", zeroTreat = "Control", timeRange = c("10min", "20min"))
data[["treatment"]]
timeRange = c("10min", "20min")
subset1 <- data[, data[[condition]] == "TreatmentA" & data$timepoint %in% timeRange]
subset1 <- data[, data[["treatment"]] == "TreatmentA" & data$timepoint %in% timeRange]
subset1 <- se[, se[["treatment"]] == "TreatmentA" & se$timepoint %in% timeRange]
subset1
result <- addZeroTime(se, condition = "treatment", treat = "TreatmentA", zeroTreat = "Control", timeRange = c("10min", "20min"))
se
colData(se)
assay(se)
data <- matrix(rnorm(20), nrow = 5, ncol = 4)
colData <- DataFrame(treatment = c("TreatmentA", "TreatmentA", "Control", "Control"),
timepoint = c("10min", "20min", "0min", "10min"))
colnames(data) <- paste0("Sample", 1:4)
rownames(data) <- paste0("Gene", 1:5)
rowData <- rownames(data)
se <- SummarizedExperiment(assays = list(intensity = data), colData = colData, rowData = rowData)
se
result <- addZeroTime(data, condition = "treatment", treat = "TreatmentA", zeroTreat = "Control", timeRange = c("10min", "20min"))
result <- addZeroTime(se, condition = "treatment", treat = "TreatmentA", zeroTreat = "Control", timeRange = c("10min", "20min"))
result
assay(se)
assay(result)
colData(se)
colData(result)
cbind(assay(se)[,1:2], assay(se)[,3:4])
assay(se)[,1:3]
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
assay(result)
assay(se)[,1:3]
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
testthat::test_file("/Users/shubhamagrawal/Documents/work/SmartPhos/tests/testthat/test-time_series_clustering.R")
load_all()
devtools::check()
load_all()
devtools::check()
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
devtools::check(args = "--no-examples")
data("swissProt")
View(swissProt)
class(swissProt)
data("Homo_sapiens")
class(Homo_sapiens)
load_all()
data("dda_example")
class(dda_example)
devtools::check(args = "--no-examples")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
devtools::check()
?use_usethis
?testthat
?create
